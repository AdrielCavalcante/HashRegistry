{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-33c1e6e1d05888c3691a8d7a270497ad8be6efe2",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/HashRegistry.sol": "project/contracts/HashRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/HashRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ncontract HashRegistry {\n    mapping(bytes32 => bool) public hashes;\n    bytes32[] public hashList;\n    mapping(bytes32 => uint256) public hashTimestamps;\n    mapping(bytes32 => address) public hashOwners;\n\n    event HashRegistrado(bytes32 hash, address owner, uint256 timestamp);\n\n    function registrarHash(bytes32 hash) public {\n        require(!hashes[hash], \"Hash already registered!\");\n        hashes[hash] = true;\n        hashList.push(hash);\n        hashTimestamps[hash] = block.timestamp;\n        hashOwners[hash] = msg.sender;\n        emit HashRegistrado(hash, msg.sender, block.timestamp);\n    }\n\n    function verificarHash(bytes32 hash) public view returns (bool) {\n        return hashes[hash];\n    }\n\n    function getTotalHashes() public view returns (uint256) {\n        return hashList.length;\n    }\n\n    function getHashByIndex(uint256 index) public view returns (bytes32) {\n        require(index < hashList.length, \"Index out of bounds\");\n        return hashList[index];\n    }\n\n    function getHashDetails(bytes32 hash) public view returns (\n        bool exists,\n        uint256 timestamp,\n        address owner\n    ) {\n        return (\n            hashes[hash],\n            hashTimestamps[hash],\n            hashOwners[hash]\n        );\n    }\n\n    function getAllHashes() public view returns (bytes32[] memory) {\n        return hashList;\n    }\n}\n"
      }
    }
  }
}